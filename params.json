{"name":"SPAM filter based on Naive Bayes model","tagline":"SPAM classifier for textual data","body":"# Spam Filter\r\n\r\n## Description\r\nA Spam filter, that classifies electronic mails using Naive Bayes approach with add-one smoothing.\r\nFeatures used: Bag of words with associated probabilities\r\n\r\n## Running instructions\r\nThe filter can be used ad-hoc with the model provided (spam.nb) or it can be retrained with new data.\r\n\r\n### 1. Ad-hoc classification\r\nClassification can be done using the following command\r\n\r\npython3 nbclassify.py modelfile testfile\r\n\r\nThe modelfile in this case is spam.nb\r\nThe testfile has to be formatted in such a way that each line corresponds to a single batch of text that needs to be classified.\r\n\r\n### 2. Retraining and classification\r\nRetraining is to be done in two phases: Data formatting and Model generation\r\n\r\n#### Data formatting \r\nIn this stage the individual text files to be used for training are aggregated to one single training file.\r\nFollow the naming convension for naming files. \r\nSPAM# for files whose contents are spam and HAM# for other files.\r\nPut all such files into a seperate folder along with parsetraining.py and run using the following command\r\n\r\npython3 parsetraining.py spam\r\n\r\n#### Model generation\r\nThe data formatting phase generates a training file spam_training.txt and this file is used to train the model. The training \r\nis done with the following command\r\n\r\npython3 nblearn.py trainingfile modelfile\r\n\r\nModel generation phase can also be associated with an evaluation step using a heldout development set, which measures the performance of the model.\r\nThe command is as follows\r\n\r\npython3 nbclassify.py modelfile devfile eval\r\n\r\nThis will generate a text file evaluation.txt that contain the evaluation report","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}